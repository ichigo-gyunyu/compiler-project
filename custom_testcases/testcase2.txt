%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is



%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is



%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is



%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is



%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.


%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is
% declared. This will be handled at the semantic analyzer phase.

%Test Case 2: Syntactically correct test case
%Following function computes the sum of user defined real numbers
%The variable d3 maintains the sum of values
_smN  input parameter list [int d5cc34]
output parameter list[real d3];
	type int : b5b567;
	b5b567 <--- 1;
	d3 <--- 0.00;
	while ( b5b567 <= d5cc34)
		read( c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end


%Test Case 4: Syntactically correct testcase
%Following program computes an arithmetic expression

% The following function computes the function value for the given inputs
_computeFunctionValue input parameter list[int c3, int c4, int c5]
output parameter list [real c6];
	type real : d4cbcd5677;
	type real : c4bbb;
	c6 <--- 5000.79;
	d4cbcd5677<--- ((c3 + 2*c4)-(c5-5))/ 4;
	c4bbb <--- ((d4cbcd5677- 2.35)*(2345-234*8))+5*c3;
	if((~(c4bbb == 0)) &&& (c4bbb > 78.56))
	then
		c6<--- d4cbcd5677/c4bbb;
	else
		write(c4bbb);
	endif

	return [c6];
end

%Test Case 5: The following source code is expected to be syntactically correct as per the modified grammar.
%If any line has syntax error, please inform me as that error needs to be fixed in this test case.

_unionfunction  input parameter list [record #two d5cc34, #point c2d3]
output parameter list[real d3];

	record #two
		type #point: beginpoint;
		type #point: endpoint;
	endrecord


	type record #two : b5b567;
	type record #one : b3;
	type #point: d5;
	b5b567 <--- c6*2;
	b3 <--- c6-c3;
	while ( b5b567 <= d5cc34)
		read(c3bd);
		d3 <--- d3 + c3bd;
		b5b567 <--- b5b567 + 1;
	endwhile
	return [d3];
end
% type checking will be required in stage 2. Despite some type errors, undeclared variables etc the code is syntactically correct
%in this function.

%Test Case 3: Syntactically correct testcase
%Following program computes the average marks obtained by students in three subjects

%Following function reads marks of a student in all subjects and returns as a record variable
% Note that the variable b7 is not used anywhere but it is the syntactic requirement to have
% atleast one input parameter
_readMarks input parameter list[int b7]
output parameter list [ record #marks b3c45];
	read(b3c45.maths);
	read(b3c45.physics);
	read(b3c45.chemistry);
	return [b3c45];
end
% Notice here that  your compiler recognizes the type definition of marks even before it is

_main
	type int :b3;
	type real :c4bd56;
	b3 <--- 7;
	[c4bd56]<--- call _sumN with parameters [b3];
	write(c4bd56);
	return
end

